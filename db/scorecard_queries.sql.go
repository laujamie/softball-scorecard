// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scorecard_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createUmpireScorecard = `-- name: CreateUmpireScorecard :one
INSERT INTO umpire_scorecards (
    home_team,
    away_team,
    max_runs_per_inning
) VALUES (
    ?,
    ?,
    ?    
) RETURNING id, home_team, away_team, max_runs_per_inning, created_on
`

type CreateUmpireScorecardParams struct {
	HomeTeam         interface{}
	AwayTeam         interface{}
	MaxRunsPerInning sql.NullInt64
}

func (q *Queries) CreateUmpireScorecard(ctx context.Context, arg CreateUmpireScorecardParams) (UmpireScorecard, error) {
	row := q.db.QueryRowContext(ctx, createUmpireScorecard, arg.HomeTeam, arg.AwayTeam, arg.MaxRunsPerInning)
	var i UmpireScorecard
	err := row.Scan(
		&i.ID,
		&i.HomeTeam,
		&i.AwayTeam,
		&i.MaxRunsPerInning,
		&i.CreatedOn,
	)
	return i, err
}

const createUmpireScorecardInning = `-- name: CreateUmpireScorecardInning :one
INSERT INTO umpire_scorecard_innings (
    scorecard_id,
    inning_number,
    is_home,
    runs_scored,
    outs_recorded
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?
) RETURNING id, scorecard_id, inning_number, is_home, runs_scored, outs_recorded, created_on
`

type CreateUmpireScorecardInningParams struct {
	ScorecardID  int64
	InningNumber int64
	IsHome       int64
	RunsScored   int64
	OutsRecorded int64
}

func (q *Queries) CreateUmpireScorecardInning(ctx context.Context, arg CreateUmpireScorecardInningParams) (UmpireScorecardInning, error) {
	row := q.db.QueryRowContext(ctx, createUmpireScorecardInning,
		arg.ScorecardID,
		arg.InningNumber,
		arg.IsHome,
		arg.RunsScored,
		arg.OutsRecorded,
	)
	var i UmpireScorecardInning
	err := row.Scan(
		&i.ID,
		&i.ScorecardID,
		&i.InningNumber,
		&i.IsHome,
		&i.RunsScored,
		&i.OutsRecorded,
		&i.CreatedOn,
	)
	return i, err
}

const listUmpireScorecards = `-- name: ListUmpireScorecards :many
SELECT 
    us.id,
    us.home_team,
    us.away_team,
    us.created_on,
    us.max_runs_per_inning,
    usi.inning_number,
    usi.is_home,
    usi.runs_scored,
    usi.outs_recorded
FROM umpire_scorecards us
JOIN umpire_scorecard_innings usi
ON us.id = usi.scorecard_id
ORDER BY created_on
`

type ListUmpireScorecardsRow struct {
	ID               int64
	HomeTeam         interface{}
	AwayTeam         interface{}
	CreatedOn        int64
	MaxRunsPerInning sql.NullInt64
	InningNumber     int64
	IsHome           int64
	RunsScored       int64
	OutsRecorded     int64
}

func (q *Queries) ListUmpireScorecards(ctx context.Context) ([]ListUmpireScorecardsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUmpireScorecards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUmpireScorecardsRow
	for rows.Next() {
		var i ListUmpireScorecardsRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeTeam,
			&i.AwayTeam,
			&i.CreatedOn,
			&i.MaxRunsPerInning,
			&i.InningNumber,
			&i.IsHome,
			&i.RunsScored,
			&i.OutsRecorded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
